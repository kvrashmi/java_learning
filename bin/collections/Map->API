1.put(K, V) - Inserts the association of a key K and a value V into the map. 
If the key is already present, the new value replaces the old value.
Ex:
	Map<String,String> m = new HashMap<String,String>();
	m.put("USA","Dollars");
	m.put("UK","Euro");
2. putAll() - Inserts all the entries from the specified map to this map.
    Map<String,String> m1 = new HashMap<String,String>();
	m1.put("India","Delhi");
	m1.put("Nepal","Katmandu");
	m.putAll(m1);
	
putIfAbsent(K, V) - Inserts the association if the key K is not already associated with the value V.
Ex:
HashMap<Integer, String> languages = new HashMap<>();

    // add mappings to HashMap
    languages.put(1, "Python");
    languages.put(2, "C");
    languages.put(3, "Java");
    System.out.println("Languages: " + languages);

    // key already not present in HashMap
    languages.putIfAbsent(4, "JavaScript");

    // key already present in HashMap
    languages.putIfAbsent(2, "Swift");
    System.out.println("Updated Languages: " + languages);
    
get(K) - Returns the value associated with the specified key K. If the key is not found, it returns null.
getOrDefault(K, defaultValue) - Returns the value associated with the specified key K. 
If the key is not found, it returns the defaultValue.
containsKey(K) - Checks if the specified key K is present in the map or not.
containsValue(V) - Checks if the specified value V is present in the map or not.
replace(K, V) - Replace the value of the key K with the new specified value V.
replace(K, oldValue, newValue) - Replaces the value of the key K with the new value newValue only if the key K is associated with the value oldValue.
remove(K) - Removes the entry from the map represented by the key K.
remove(K, V) - Removes the entry from the map that has key K associated with value V.

keySet() - Returns a set of all the keys present in a map.
values() - Returns a set of all the values present in a map.
entrySet() - Returns a set of all the key/value mapping present in a map.

